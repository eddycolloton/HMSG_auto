#This is a list of functions called throughout the script. The functions are "called" later on in the script.

#This function makes the nested directores of a Time-based Media Artwork File
function MakeArtworkFile {
	echo "Create the Artwork File?"
	select Make_ArtFile_option in "Yes, create the Artwork File" "No, quit"
	do
		case $Make_ArtFile_option in
			"Yes, create the Artwork File") echo "Enter Artist Name in 'Last Name, First Name' format"
				read ArtFile_ArtistName
				while [[ -z "$ArtFile_ArtistName" ]] ; do 
					echo "Enter Artist Name in 'Last Name, First Name' format" && read ArtFile_ArtistName
				done
				echo "Enter Accession Number in '##.##' format"
				read ArtFile_Accession
				while [[ -z "$ArtFile_Accession" ]] ; do
					echo "Enter Accession Number in '##.##' format" && read ArtFile_Accession
				done
				echo "Enter Artwork Title"
				read ArtFile_Title
				while [[ -z "$ArtFile_Title" ]] ; do
					echo "Enter Artwork Title" && read ArtFile_Title
				done
        #I've removed the path to the HMSG shared drive below for security reasons, hopefully we'll be able to have it back in? I have to get that cleared...
				mkdir -pv /path/to/artwork_files/"$ArtFile_ArtistName"/"time-based media"/"$ArtFile_Accession"_"$ArtFile_Title"/{"Acquisition and Registration","Artist Interaction","Cataloging","Conservation"/{"Condition_Tmt Reports","DAMS","Equipment Reports"},"Iteration Reports_Exhibition Info"/"Equipment Reports","Photo-Video Documentation","Research"/"Correspondence","Technical Info_Specs"/"Past installations_Pics","Trash"}
				ArtFile=/path/to/artwork_files/"$ArtFile_ArtistName"/"time-based media"/"$ArtFile_Accession"_"$ArtFile_Title"
				echo "The Artwork file is $ArtFile"
			break;;
			"No, quit") echo "Quitting now..." && exit 1
			break;;
		esac
	done
} 

#This function makes the staging directory if one does not exist
function MakeStagingDirectory {
	echo "Create the Staging Directory?"
	select Make_Sdir_option in "Yes, create the staging directory" "No, quit"
	do
		case $Make_Sdir_option in
			"Yes, create the staging directory") echo "Enter Accession Number in '##-##' format"
				read SDir_Accession
				while [[ -z "$SDir_Accession" ]] ; do 
					echo "Enter Accession Number in '##-##' format" && read SDir_Accession
				done
				echo "Enter Artist Last name"
				read SDir_ArtistName
				while [[ -z "$SDir_ArtistName" ]] ; do 
					echo "Enter Artist Last name" && read SDir_ArtistName
				done
				mkdir /Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$SDir_ArtistName"
				SDir=/Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$SDir_ArtistName"
				echo "The Staging Directory is $SDir"
			break;;
			"No, quit") echo "Quitting now..." && exit 1
			break;;
		esac
	done
	
}

#This function runs the python script copyit.py from the IFIscripts directory
function CopyitVolumeStaging {
	python3 /Users/eddycolloton/IFIscripts-master/copyit.py "$Volume" "$SDir" &&
	for t in "`find "$SDir" -name "*_manifest.md5"`" ; do cp "$t" "$ArtFile"/Technical\ Info_Specs/ && echo -e "\n***** md5 checksum manifest ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt && cat "$t" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt
	done
}

#This function will create a disktype output and copy the output to Staging Directory, Tech Specs dir in ArtFile and appendix in ArtFile
function disktype {
	sudo disktype $Device > "$SDir"/disktype_output.txt &&
	echo -e "\n***** disktype output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cat "$SDir"/disktype_output.txt >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cp "$SDir"/disktype_output.txt "$ArtFile"/Technical\ Info_Specs/
}

#This function runs tree on the Volume sends the output to three text files 
function RunTree {
	tree "$Volume" > "$SDir"/tree_output.txt &&
	echo -e "\n***** tree output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cat "$SDir"/tree_output.txt >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cp "$SDir"/tree_output.txt "$ArtFile"/Technical\ Info_Specs/
}
 
#This function will create siegfried sidecar files for all files in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunSF {
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" \) -print0 | 
	while IFS= read -r -d '' i; do
		sf "$i" > "${i%.*}_sf."txt ; 
	#runs sf on all files in the staging directory except files that were made earlier in this workflow (md5 manifest, disktype, tree, and DS_Stores) 
	#The "for" loop was not working with this command. I found the IFS solution online, but honestly don't totally understand how it works.
	done && 
	echo -e "\n***** siegfried output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" ! -iname "*_sf.txt" \) -print0 | 
	while IFS= read -r -d '' v; 
		do sf "$v" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt ; 
	done && 
	find "$SDir" -type f \( -iname "*_sf.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}

#This function will create MediaInfo sidecar files for all files with .mp4, .mov and .mkv file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunMI {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			mediainfo -f "$i" > "${i%.*}_mediainfo".txt
			echo -e "\n***** mediainfo -f output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt
			mediainfo -f "$i" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt  
	done &&
	for t in "`find "$SDir" -name "*_mediainfo.txt"`" ; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/ ; 
	done 
}

#This function will make a text file containing md5 checksums of each frame of any video files in the Staging Directory. The output will be saved as a side car file in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_Framemd5 {
	for i in  "`find "$SDir" -name "*.mp4" -o -name "*.mov" -o -name "*.mkv"`" ; 
	do ffmpeg -i "$i" -f framemd5 -an  "${i%.*}_framemd5".txt ; 
	done && 
	find "$SDir" -type f \( -iname "*_framemd5.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}

#This function will make a QCTools report for video files with the .mp4, .mov and .mkv extensions and save the reports as sidecar files int he Staging Directory and the Tech Specs dir in the ArtFile
function Make_QCT {
	for i in  "`find "$SDir" -name "*.mp4" -o -name "*.mov" -o -name "*.mkv"`" ; 
	do qcli -i "$i" ; done && 
	find "$SDir" -type f \( -iname "*.qctools.xml.gz" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}
