#This is a list of functions called throughout the make_dirs and make_meta scripts.

#This function makes the nested directores of a Time-based Media Artwork File
function MakeArtworkFile {
	while [[ -z "$accession" ]] ; do
		echo "Enter Accession Number in '##.##' format" && read accession
		#prompts user for accession number and reads input
	done
	while [[ -z "$title" ]] ; do
		echo "Enter Artwork Title" && read title
		#prompts user for artwork title and reads input
	done
	mkdir -pv /path/to/artwork_files/"$ArtistLastName"", ""$ArtistFirstName"/"time-based media"/"$accession""_""$title"/{"Acquisition and Registration","Artist Interaction","Cataloging","Conservation"/{"Condition_Tmt Reports","DAMS","Equipment Reports"},"Iteration Reports_Exhibition Info"/"Equipment Reports","Photo-Video Documentation","Research"/"Correspondence","Technical Info_Specs"/"Past installations_Pics","Trash"}
	#creates Artwork File directories
	#I've removed the path to the HMSG shared drive below for security reasons
	ArtFile=/path/to/artwork_files/"$ArtistLastName"", ""$ArtistFirstName"/"time-based media"/"$accession""_""$title"
	#assigns the ArtFile variable to the artwork file just created 
	#I've removed the path to the HMSG shared drive below for security reasons
	echo -e "\n*************************************************\nThe Artwork file is $ArtFile\n"
} 

#This function makes the staging directory if one does not exist
function MakeStagingDirectory {
	echo "Create the Staging Directory?"
	select Make_Sdir_option in "Yes, create the staging directory" "No, quit"
	do
		case $Make_Sdir_option in
			"Yes, create the staging directory") 
				if [ -z "${ArtFile_Accession+x}" ]; 
					then echo "Enter Accession Number in '##-##' format"
					read SDir_Accession
					while [[ -z "$SDir_Accession" ]] ; do 
						echo "Enter Accession Number in '##-##' format" && read SDir_Accession
					done;
				else SDir_Accession=`echo $ArtFile_Accession | sed 's/\./-/g'` ; fi
				if [ -z "${ArtFile_ArtistName+x}" ]; 
					then echo "Enter Artist Last name"
					read SDir_ArtistName
					while [[ -z "$SDir_ArtistName" ]] ; do 
						echo "Enter Artist Last name" && read SDir_ArtistName
					done;
				else SDir_ArtistName=`echo $ArtFile_ArtistName | sed s/,.*// ` ; fi
				mkdir /Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$SDir_ArtistName"
				SDir=/Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$SDir_ArtistName"
				echo "The Staging Directory is $SDir"
			break;;
			"No, quit") echo "Quitting now..." && exit 1
			break;;
		esac
	done
	
}

#This function runs the python script copyit.py from the IFIscripts directory
function CopyitVolumeStaging {
	python3 /Users/eddycolloton/IFIscripts-master/copyit.py "$Volume" "$SDir" &&
	for t in "`find "$SDir" -name "*_manifest.md5"`" ; do cp "$t" "$ArtFile"/Technical\ Info_Specs/ && echo -e "\n***** md5 checksum manifest ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt && cat "$t" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt
	done
}

#This function will create a disktype output and copy the output to Staging Directory, Tech Specs dir in ArtFile and appendix in ArtFile
function disktype {
	sudo disktype $Device > "$SDir"/disktype_output.txt &&
	echo -e "\n***** disktype output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cat "$SDir"/disktype_output.txt >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cp "$SDir"/disktype_output.txt "$ArtFile"/Technical\ Info_Specs/
}

#This function runs tree on the Volume sends the output to three text files 
function RunTree {
	tree "$Volume" > "$SDir"/tree_output.txt &&
	echo -e "\n***** tree output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cat "$SDir"/tree_output.txt >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	cp "$SDir"/tree_output.txt "$ArtFile"/Technical\ Info_Specs/
}
 
#This function will create siegfried sidecar files for all files in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunSF {
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" \) -print0 | 
	while IFS= read -r -d '' i; do
		sf "$i" > "${i%.*}_sf."txt ; 
	#runs sf on all files in the staging directory except files that were made earlier in this workflow (md5 manifest, disktype, tree, and DS_Stores) 
	#The "for" loop was not working with this command. I found the IFS solution online, but honestly don't totally understand how it works.
	done && 
	echo -e "\n***** siegfried output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt &&
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" ! -iname "*_sf.txt" \) -print0 | 
	while IFS= read -r -d '' v; 
		do sf "$v" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt ; 
	done && 
	find "$SDir" -type f \( -iname "*_sf.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}

#This function will create MediaInfo sidecar files for all files with .mp4, .mov and .mkv file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunMI {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.wav -o -iname \*.flac -o -iname \*.mp3 -o -iname \*.aac -o -iname \*.wma -o -iname \*.m4a \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			mediainfo -f "$i" > "${i%.*}_mediainfo".txt
			echo -e "\n***** mediainfo -f output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt
			mediainfo -f "$i" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt  
	done &&
	for t in "`find "$SDir" -name "*_mediainfo.txt"`" ; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/ ; 
	done 
}

#This function will create Exiftool sidecar files for all files with .jpg, .jpeg, .png and .tiff file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunExif {
	find "$SDir" -type f \( -iname \*.jpg -o -iname \*.jpeg -o -iname \*.png -o -iname \*.tiff \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			exiftool "$i" > "${i%.*}_exif".txt
			echo -e "\n***** Exiftool output ***** \n" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt
			exiftool "$i" >> "$ArtFile"/Conservation/Condition_Tmt\ Reports/appendix.txt  
	done &&
	find "$SDir" -type f \( -iname "*_exif.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}

#This function will make a text file containing md5 checksums of each frame of any video files in the Staging Directory. The output will be saved as a side car file in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_Framemd5 {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.wav -o -iname \*.flac -o -iname \*.mp3 -o -iname \*.aac -o -iname \*.wma -o -iname \*.m4a \) -print0 |  
	while IFS= read -r -d '' i;
		do   
			ffmpeg -i "$i" -f framemd5 -an  "${i%.*}_framemd5".txt ; 
	done && 
	find "$SDir" -type f \( -iname "*_framemd5.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}

#This function will make a QCTools report for video files with the .mp4, .mov and .mkv extensions and save the reports as sidecar files in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_QCT {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 \) -print0 |  
	while IFS= read -r -d '' i;
	do qcli -i "$i" ; done && 
	find "$SDir" -type f \( -iname "*.qctools.xml.gz" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$ArtFile"/Technical\ Info_Specs/
	done 
}

