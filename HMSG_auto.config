#This is a list of functions called throughout the make_dirs and make_meta scripts.

#This function makes the nested directores of a Time-based Media Artwork File
function MakeArtworkFile {
	while [[ -z "$accession" ]] ; do
		echo "Enter Accession Number in '##.##' format" && read accession
		#prompts user for accession number and reads input
	done
	while [[ -z "$title" ]] ; do
		echo "Enter Artwork Title" && read title
		#prompts user for artwork title and reads input
	done
	mkdir -pv /path/to/artwork_files/"$ArtistLastName"", ""$ArtistFirstName"/"time-based media"/"$accession""_""$title"/{"Acquisition and Registration","Artist Interaction","Cataloging","Conservation"/{"Condition_Tmt Reports","DAMS","Equipment Reports"},"Iteration Reports_Exhibition Info"/"Equipment Reports","Photo-Video Documentation","Research"/"Correspondence","Technical Info_Specs"/"Past installations_Pics","Trash"}
	#creates Artwork File directories
	#I've removed the path to the HMSG shared drive below for security reasons
	ArtFile=/path/to/artwork_files/"$ArtistLastName"", ""$ArtistFirstName"/"time-based media"/"$accession""_""$title"
	#assigns the ArtFile variable to the artwork file just created 
	#I've removed the path to the HMSG shared drive below for security reasons
	echo -e "\n*************************************************\nThe Artwork file is $ArtFile\n"
} 

#this function searches the artwork folder for the accession number, if there is one, it retrieves it, if there isn't it requests one from the user
function FindAccessionNumber {
IFS=$'\n'
titledir=$(find "$ArtFile" -mindepth 1 -maxdepth 4 -type d -iname '*[0-9]*' \( -iname "*.*" -o -iname "*-*" \))
#looks in the ArtFile for a directory with numbers in the name, if it finds one, AND it has a period OR a dash in the directory name, it assigns that to the titledir variable
if [[ -z "$titledir" ]]; then 
#if the $titledir variable is empty, then
	echo -e "\nCannot find accession number in Artwork File directories"
	echo -e "\n*************************************************\n
	Input accession number"
	read -e accession
	#Asks for user input and assigns it to variable
	echo "The accession number is $accession"
fi

if [[ -z "${accession+x}" ]]; 
#if the accession variable is not assigned, and there are numbers in the titledir name
then acount=$(echo "$titledir" | grep -oE '[0-9]')
#this grep command prints every digit it finds in titledir on a new line, and assigns that output to the variable "acount"
	if [[ $(echo "$acount" | wc -l) =~ 3 ]]; then
	#pipes the contents of the acount variable to wc -l, which counts the number of lines. if the number of lines equals 3, then
		accession=`echo $titledir | sed 's/^.*\([0-9][0-9].[0-9]\).*$/\1/' ` 
		#sed command cuts everything before and after ##.# in the titledir variable name. I got the sed command from https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern/243236
		echo -e "*************************************************\n\nThe accession number is $accession\n\n*************************************************\n" 
	elif [[ $(echo "$acount" | wc -l) =~ 4 ]]; then
	#pipes the contents of the acount variable to wc -l, which counts the number of lines. if the number of lines equals 4, then
		accession=`echo $titledir | sed 's/^.*\([0-9][0-9].[0-9][0-9]\).*$/\1/' ` 
		#sed command cuts everything before and after ##.## in the titledir variable name. I got the sed command from https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern/243236
		echo -e "*************************************************\n\nThe accession number is $accession\n\n*************************************************\n"
	elif [[ $(echo "$acount" | wc -l) =~ 7 ]]; then
	#pipes the contents of the acount variable to wc -l, which counts the number of lines. if the number of lines equals 7, then
		echo "$titledir has 7 digits" 
		accession=`echo $titledir | sed 's/^.*\([0-9][0-9][0-9][0-9].[0-9][0-9][0-9]\).*$/\1/' ` 
		#same as before, sed command cuts everything before and after ####.### in the titledir variable name. I got the sed command from https://unix.stackexchange.com/questions/243207/how-can-i-delete-everything-until-a-pattern-and-everything-after-another-pattern/243236
		echo -e "*************************************************\nThe accession number is $accession\n\n*************************************************\n"
	else 
		echo -e "\n*************************************************\n \nCannot find accession number in Artwork File directories"
		echo -e "\n*************************************************\n
		Input accession number"
		read -e accession
		#Asks for user input and assigns it to variable
		echo "The accession number is $accession"
		#currently filling accession variable with this way, so these other if statements work
	fi
fi
unset IFS
}

#This function determines if the list_of_dirs.txt file exists, and if it does, it deletes it.
function DeleteList {
test -f $(find "$techdir" -type f \( -iname "*_list_of_dirs.txt" \)) && 
find "$techdir" -type f \( -iname "*_list_of_dirs.txt" \) -print0 |
	while IFS= read -r -d '' l;
		do mv "$l" ~/.Trash
	done 
}

#This function makes the staging directory if one does not exist
function MakeStagingDirectory {
	if [ -z "${accession+x}" ]; then
	while [[ -z "$SDir_Accession" ]] ; do 
	echo "Enter Accession Number in '##-##' format" && read SDir_Accession
done;
else SDir_Accession=`echo "$accession" | sed 's/\./-/g'` ;
#The sed command replaces the period in the accession variable with a dash. Found it here: https://stackoverflow.com/questions/6123915/search-and-replace-with-sed-when-dots-and-underscores-are-present 
fi
mkdir /Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$ArtistLastName"
SDir=/Volumes/TBMA\ Drobo/Time\ Based\ Media\ Artwork/"$SDir_Accession"_"$ArtistLastName"
echo -e "The Staging Directory is $SDir \n" 
}

function MultiSelection {
cowsay -s "Select directories from the list below. Type the corresponding number and press enter to select one. Repeat as necessary. Once all the directories have been selected, press enter again."
#The majority of this function comes from here: http://serverfault.com/a/298312
options=()
while IFS=  read -r -d $'\0'; do
    options+=("$REPLY")
done < <(find "${Volume%/}" -not -path '*/\.*' ! -iname "System Volume Information" -type d -mindepth 1 -print0)
#I got the array parts of this from https://stackoverflow.com/questions/23356779/how-can-i-store-the-find-command-results-as-an-array-in-bash
#Except for the "not path" stuff, to avoid retrieving hidden files, which comes from here: https://askubuntu.com/questions/266179/how-to-exclude-ignore-hidden-files-and-directories-in-a-wildcard-embedded-find
#The -iname statement ignores directories named "System Volume Information" a hidden directory on a drive I was testing with, that the '*/.*' did not catch. we can add other such directories to this find command over time.
#The curly brackets and %/ around the Volume variable remove a trailing "/" if it is present (does nothing if it isn't there). This prevents a double "//" from ending up in the list of directories.
menu() {
    echo "Avaliable options:"
    for i in ${!options[@]}; do
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    [[ "$msg" ]] && echo "$msg" ; :
}
 
prompt="Check an option (again to uncheck, ENTER when done): "
while menu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option: $num"; continue; }
    ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
done 
#All of this is form http://serverfault.com/a/298312
for i in ${!options[@]}; do 
    [[ "${choices[i]}" ]] && { printf "${options[i]}"; msg=""; printf "\n"; } >> "${techdir}/${accession}_list_of_dirs.txt"
    #This "for" loop used to printf a message with the selected options (from http://serverfault.com/a/298312), but I've changed it to print the output of the chioces to a text file. 
done

declare -a SelectedDirs
#creates an empty array
let i=0
while IFS=$'\n' read -r line_data; do
    #stipulates a line break as a field seperator, then assigns the variable "line_data" to each field read
    SelectedDirs[i]="${line_data}"
    #states that each line will be an element in the arary
    ((++i))
    #adds each new line to the array
done < "${techdir}/${accession}_list_of_dirs.txt"
#populates the array with contents of the text file, with each new line assigned as its own element 
#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
echo -e "\nThe selected directories are: ${SelectedDirs[@]}"
DirsList=${SelectedDirs[@]}
#lists the contents of the array, populated by the text file
}

function CopyitSelected {
declare -a SelectedDirs
#creates an empty array
#For whatever reason, the array isn't a golabl variable, so it has to be created again. 
let i=0
while IFS=$'\n' read -r line_data; do
    #stipulates a line break as a field seperator, then assigns the variable "line_data" to each field read
    SelectedDirs[i]="${line_data}"
    #states that each line will be an element in the arary
    ((++i))
    #adds each new line to the array
done < "${techdir}/${accession}_list_of_dirs.txt"
#populates the array with contents of the text file, with each new line assigned as its own element 
#got this from https://peniwize.wordpress.com/2011/04/09/how-to-read-all-lines-of-a-file-into-a-bash-array/
for eachdir in "${SelectedDirs[@]}"; do 
#for each element in the array, do
    python3 /Users/eddycolloton/IFIscripts-master/copyit.py "$eachdir" "$SDir" 
done &&
#run the IFI copyit script and send each selected directory to the staging directory
#On 03/02/2021 I had all kinds of problems with python3 after an xcode update. I ran brew unlink python@3.9, brew unlink python@3.8, and brew link python@3.8. Then I ran echo 'export PATH="/usr/local/opt/python@3.8/bin:$PATH"' >> ~/.zshrc. This last step seemed to make it work, but I have to run pip3 with "sudo" now. Solution fond here: https://github.com/Homebrew/homebrew-core/issues/62911#issuecomment-733866503
for t in "`find "$SDir" -name "*_manifest.md5"`" ; do cp "$t" "$techdir" && echo -e "\n***** md5 checksum manifest ***** \n" >> "${reportdir}/${accession}_appendix.txt" && cat "$t" >> "${reportdir}/${accession}_appendix.txt"
done
}

function FindConditionDir {
reportdir=$(find "$ArtFile" -mindepth 1 -maxdepth 4 -type d -iname "Condition_Tmt Reports")
#looks for the Condition_Tmt Reports directory and, if found, assigns it to the $reportdir variable
if [[ -z "$reportdir" ]]; then 
#if the $reportdir variable is empty (unassigned), then 
	echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \nCannot find Condition_Tmt Reports directory \nSee directories listed below \n"
	tree "$ArtFile"
	cowsay "Select a directory to create the Condition_Tmt Reports directory, or choose to quit:"

	IFS=$'\n'; select reportdir_parent in "$ArtFile" $(find "$ArtFile" -mindepth 1 -maxdepth 1 -type d) $(find "$ArtFile" -mindepth 2 -maxdepth 2 -type d) $(find "$ArtFile" -mindepth 3 -maxdepth 3 -type d) $(find "$ArtFile" -mindepth 4 -maxdepth 4 -type d) "Quit" ; do
	#lists options for select command, the ArtFile and subsequent subdirectories, regadless of name. The IFS statment stops it from escaping when it hits spaces in directory names
	if [[ $reportdir_parent = "$ArtFile" ]]; then
		#if user selects artwork file as the parent directory, then
		mkdir -pv "$reportdir_parent"/"Condition_Tmt Reports"
	fi
	if [[ $reportdir_parent = "$(find "$ArtFile" -mindepth 1 -maxdepth 1 -type d)" ]]; then
		#if user selects the subdirectory of the artwork file as the parent directory, then
		mkdir -pv "$reportdir_parent"/"Condition_Tmt Reports"
	fi
	if [[ $reportdir_parent = "$(find "$ArtFile" -mindepth 2 -maxdepth 2 -type d)" ]]; then
		#if user selects the subdirectory of the artwork file as the parent directory, then
		mkdir -pv "$reportdir_parent"/"Condition_Tmt Reports"
	fi
	if [[ $reportdir_parent = "$(find "$ArtFile" -mindepth 3 -maxdepth 3 -type d)" ]]; then
		#if user selects the subdirectory of the artwork file as the parent directory, then
		mkdir -pv "$reportdir_parent"/"Condition_Tmt Reports"
	fi
	if [[ $reportdir_parent = "$(find "$ArtFile" -mindepth 4 -maxdepth 4 -type d)" ]]; then
		#if user selects the subdirectory of the artwork file as the parent directory, then
		mkdir -pv "$reportdir_parent"/"Condition_Tmt Reports"
	fi
	if [[ $reportdir_parent = "Quit" ]]; then
		#if user selects quit, then
		exit 1
		#ends the script, exits
	fi
break		
done;
unset IFS
reportdir="$reportdir_parent"/"Condition_Tmt Reports"
#if the $reportdir variable is empty, this will assign the variable to the directory created as a result of the user selection
echo -e "\n*************************************************\n \nThe Condition_Tmt Reports directory is $reportdir \n\nMetadata output will be written to the appendix.txt file in $reportdir \n\n*************************************************\n"
#need some sort of user acknowledgement here
else echo -e "\n*************************************************\n \nThe Condition_Tmt Reports directory is $reportdir \n\nMetadata output will be written to the appendix.txt file in $reportdir \n\n*************************************************\n"
#States the location of the report dir if it was found in the inital find command (before the if statement)
fi
}

function FindTechDir {
techdir=$(find "$ArtFile" -mindepth 1 -maxdepth 4 -type d -iname "Technical Info_Specs")
#looks for the Technical Info_Specs directory
if [[ -z "$techdir" ]]; then
#if the $techdir variable is empty (unassigned), then 
	echo -e "\n*************************************************\n \nThe artwork file does not match expected directory structure. \nCannot find Technical Info_Specs directory\nSee directories listed below \n"
	tree "$ArtFile"
	PS3="Select a directory to create the Technical Info_Specs directory, or choose to quit:"
	#prompt for select command
	IFS=$'\n'; select techdir_parent in "$ArtFile" $(find "$ArtFile" -mindepth 1 -maxdepth 1 -type d) $(find "$ArtFile" -mindepth 2 -maxdepth 2 -type d) $(find "$ArtFile" -mindepth 3 -maxdepth 3 -type d) $(find "$ArtFile" -mindepth 4 -maxdepth 4 -type d) "Quit" ; do
	#lists options for select command, the ArtFile and subsequent subdirectories, regadless of name. The IFS statment stops it from escaping when it hits spaces in directory names
	if [[ $techdir_parent = "$ArtFile" ]]; then
		#if user selects artwork file as the parent directory, then
		mkdir -pv "$techdir_parent"/"Technical Info_Specs"
	fi
	if [[ $$techdir_parent = "$(find "$ArtFile" -mindepth 1 -maxdepth 1 -type d)" ]]; then
		#if user selects artwork file as the parent directory, then
		mkdir -pv "$techdir_parent"/"Technical Info_Specs"
	fi
	if [[ $$techdir_parent = "$(find "$ArtFile" -mindepth 2 -maxdepth 2 -type d)" ]]; then
		#if user selects artwork file as the parent directory, then
		mkdir -pv "$techdir_parent"/"Technical Info_Specs"
	fi
	if [[ $$techdir_parent = "$(find "$ArtFile" -mindepth 3 -maxdepth 3 -type d)" ]]; then
		#if user selects artwork file as the parent directory, then
		mkdir -pv "$techdir_parent"/"Technical Info_Specs"
	fi
	if [[ $$techdir_parent = "$(find "$ArtFile" -mindepth 4 -maxdepth 4 -type d)" ]]; then
		#if user selects artwork file as the parent directory, then
		mkdir -pv "$techdir_parent"/"Technical Info_Specs"
	fi
	if [[ $techdir_parent = "Quit" ]]; then
		#if user selects artwork file as the parent directory, then
		exit 1
	fi
break		
done;
unset IFS
techdir="$techdir_parent"/"Technical Info_Specs"
#if the $techdir variable is empty, this will assign the variable to the directory created as a result of the user selection
echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to the appendix.txt file in $techdir \n\n*************************************************\n"
#need some sort of user acknowledgement here  
else echo -e "\n*************************************************\n \nThe Technical Info_Specs directory is $techdir \n\nMetadata output will be written to the appendix.txt file in $techdir \n\n*************************************************\n"
#States the location of the tech dir if it was found in the inital find command (before the if statement)
fi
}


#This function runs the python script copyit.py from the IFIscripts directory
function CopyitVolumeStaging {
	python3 /Users/eddycolloton/IFIscripts-master/copyit.py "$Volume" "$SDir" &&
	for t in "`find "$SDir" -name "*_manifest.md5"`" ; do cp "$t" "$techdir" && echo -e "\n***** md5 checksum manifest ***** \n" >> "${reportdir}/${accession}_appendix.txt" && cat "$t" >> "${reportdir}/${accession}_appendix.txt"
	done
}

#This function will create a disktype output and copy the output to Staging Directory, Tech Specs dir in ArtFile and appendix in ArtFile
function disktype {
	sudo disktype $Device > "$SDir"/"$accession"_disktype_output.txt &&
	echo -e "\n***** disktype output ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
	cat "${SDir}/${accession}_disktype_output.txt" >> "${reportdir}/${accession}_appendix.txt" &&
	cp "${SDir}/${accession}_disktype_output.txt" "$techdir"
}

#This function runs tree on the Volume sends the output to three text files 
function RunTree {
	tree "$Volume" > "$SDir"/"$accession"_tree_output.txt &&
	echo -e "\n***** tree output ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
	cat "${SDir}/${accession}_tree_output.txt" >> "${reportdir}/${accession}_appendix.txt" &&
	cp "${SDir}/${accession}_tree_output.txt" "$techdir"
}
 
#This function will create siegfried sidecar files for all files in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunSF {
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" \) -print0 | 
	while IFS= read -r -d '' i; do
		sf "$i" > "${i%.*}_sf."txt ; 
	#runs sf on all files in the staging directory except files that were made earlier in this workflow (md5 manifest, disktype, tree, and DS_Stores) 
	#The "for" loop was not working with this command. I found the IFS solution online, but honestly don't totally understand how it works.
	done && 
	echo -e "\n***** siegfried output ***** \n" >> "${reportdir}/${accession}_appendix.txt" &&
	find "$SDir" -type f \( -iname "*.*" ! -iname "*.md5" ! -iname "*_output.txt" ! -iname "*.DS_Store" ! -iname "*_sf.txt" \) -print0 | 
	while IFS= read -r -d '' v; 
		do sf "$v" >> "${reportdir}/${accession}_appendix.txt" ; 
	done && 
	find "$SDir" -type f \( -iname "*_sf.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$techdir"
	done 
}

#This function will create MediaInfo sidecar files for all files with .mp4, .mov and .mkv file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunMI {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.avi \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			mediainfo -f "$i" > "${i%.*}_mediainfo".txt
			echo -e "\n***** mediainfo -f output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
			mediainfo -f "$i" >> "${reportdir}/${accession}_appendix.txt"
			#I need to revist this, running mediainfo twice is too costly, there must be a better way to do this 
	done &&
	find "$SDir" -type f \( -iname "*_mediainfo.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$techdir" 
	done 
}

#This function will create Exiftool sidecar files for all files with .jpg, .jpeg, .png and .tiff file extensions in the Staging Directory, the copy output to Tech Specs dir in ArtFile and appendix in ArtFile
function RunExif {
	find "$SDir" -type f \( -iname \*.jpg -o -iname \*.jpeg -o -iname \*.png -o -iname \*.tiff \) -print0 |  
	while IFS= read -r -d '' i;
		do  
			exiftool "$i" > "${i%.*}_exif".txt
			echo -e "\n***** Exiftool output ***** \n" >> "${reportdir}/${accession}_appendix.txt"
			exiftool "$i" >> "${reportdir}/${accession}_appendix.txt"  
	done &&
	find "$SDir" -type f \( -iname "*_exif.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$techdir"
	done 
}

#This function will make a text file containing md5 checksums of each frame of any video files in the Staging Directory. The output will be saved as a side car file in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_Framemd5 {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.avi -o -iname \*.wav -o -iname \*.flac -o -iname \*.mp3 -o -iname \*.aac -o -iname \*.wma -o -iname \*.m4a \) -print0 |  
	while IFS= read -r -d '' i;
		do   
			ffmpeg -i "$i" -f framemd5 -an  "${i%.*}_framemd5".txt ; 
	done && 
	find "$SDir" -type f \( -iname "*_framemd5.txt" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$techdir"
	done 
}

#This function will make a QCTools report for video files with the .mp4, .mov and .mkv extensions and save the reports as sidecar files in the Staging Directory and the Tech Specs dir in the ArtFile
function Make_QCT {
	find "$SDir" -type f \( -iname \*.mov -o -iname \*.mkv -o -iname \*.mp4 -o -iname \*.avi \) -print0 |  
	while IFS= read -r -d '' i;
	do qcli -i "$i" ; done && 
	find "$SDir" -type f \( -iname "*.qctools.xml.gz" -o -iname "*.qctools.mkv" \) -print0 |
	while IFS= read -r -d '' t; 
		do cp "$t" "$techdir"
	done 
}

